{"version":3,"sources":["logo.svg","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","nama","onRemove","style","color","padding","border","marginBottom","display","justifyContent","width","borderRadius","onClick","className","App","React","useState","JSON","parse","window","localStorage","getItem","list","setList","id","inputState","setInputState","loading","setLoading","keyword","setKeyword","useEffect","axios","method","url","then","res","data","console","log","catch","err","finally","getProvince","setItem","stringify","src","logo","alt","type","value","onChange","event","target","placeholder","Date","filter","item","toLowerCase","includes","map","index","d","i","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,kC,gLCE5B,SAASC,EAAT,GAAgC,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,SAChC,OACI,yBACQC,MAAO,CACLC,MAAM,OACNC,QAAQ,GACRC,OAAQ,iBACRC,aAAa,GACbC,QAAS,OACTC,eAAgB,gBAChBC,MAAM,MACNC,aAAa,SAEf,6BAAMV,GACN,4BAAQW,QAASV,EAAUW,UAAU,iBAArC,W,4CCsGDC,MA5Ff,WAAe,MAEWC,IAAMC,SAC5BC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,gBAAkB,IAH9C,mBAENC,EAFM,KAEAC,EAFA,OAMuBR,IAAMC,SAAS,CACjDQ,GAAI,GACJvB,KAAM,KARK,mBAMNwB,EANM,KAMMC,EANN,OAYiBX,IAAMC,UAAS,GAZhC,mBAYNW,EAZM,KAYGC,EAZH,OAaiBb,IAAMC,SAAS,IAbhC,mBAaNa,EAbM,KAaGC,EAbH,KA2Bb,OAXAf,IAAMgB,WAAU,YAlClB,SAAqBR,EAASK,GAC5BI,IAAM,CACJC,OAAQ,MACRC,IAAK,gFACJC,MAAK,SAASC,GAEfb,EAAQa,EAAIC,MACZC,QAAQC,IAAIH,EAAIC,KAAK,cAEtBG,OAAM,SAASC,GAEdH,QAAQC,IAAIE,EAAI,YAEjBC,SAAQ,WACPd,GAAW,MAqBXe,CAAYpB,EAASK,KACrB,IAEFb,IAAMgB,WAAU,WACdZ,OAAOC,aAAawB,QAClB,aACA3B,KAAK4B,UAAUvB,MAEjB,CAACA,IAEAK,EAED,yBAAKd,UAAU,OACX,yBAAKA,UAAU,WAAf,gBAOJ,yBAAKA,UAAU,OACb,yBAAKiC,IAAKC,IAAMlC,UAAU,WAAWmC,IAAI,SACzC,yBAAKnC,UAAU,WACT,oCACA,6BACI,yBAAKA,UAAU,cACX,2BACAoC,KAAK,OACLzB,GAAG,QACH0B,MAAOzB,EAAWxB,KAClBkD,SAAU,SAACC,GAAD,OAAW1B,EAAc0B,EAAMC,OAAOH,QAASI,YAAY,uBAErE,4BAAQL,KAAK,SAASzB,GAAG,SACzBZ,QAAS,WAEPW,EAAQ,GAAD,mBAAKD,GAAL,CAAW,CAACE,GAAI,IAAI+B,KAAQtD,KAAKwB,OAEzCZ,UAAU,gBALX,UAMA,6BACA,6BAEA,2BACAoC,KAAK,OACLzB,GAAG,QACH2B,SAAU,SAACC,GACTtB,EAAWsB,EAAMC,OAAOH,QAE1BI,YAAY,aAGpB,gCACA,yBAAK9B,GAAG,UACN,0CAECF,EAAKkC,QAAO,SAACC,GAAD,OACZA,EAAKxD,KAAKyD,cAAcC,SAAS9B,EAAQ6B,kBAEzCE,KAAI,SAACV,EAAOW,GACX,OAAO,kBAAC7D,EAAD,CACPwB,GAAIqC,EACJ5D,KAAMiD,EAAMjD,KACZC,SAAU,WACRqB,EAAQ,YAAID,EAAKkC,QAAO,SAACM,EAAGC,GAAJ,OAAUD,EAAEtC,KAAO0B,EAAM1B,mBC7F/CwC,QACW,cAA7B7C,OAAO8C,SAASC,UAEe,UAA7B/C,OAAO8C,SAASC,UAEhB/C,OAAO8C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdpC,OAAM,SAAAqC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.384f53ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nexport default function Card({nama, onRemove}){\n    return (\n        <div \n                style={{\n                  color:\"blue\", \n                  padding:10, \n                  border: \"1px solid grey\",\n                  marginBottom:10,\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                  width:\"50%\",\n                  borderRadius:\"20px\",\n                  }}>\n                <div>{nama}</div>\n                <button onClick={onRemove} className=\"button-remove\">\n                    Remove\n                </button>\n        </div>\n    );\n}","import React from 'react';\nimport Card from \"./components/Card\"\nimport logo from './logo.svg';\nimport axios from 'axios';\nimport './App.css';\n\n//komponen yang ada dibrowser ada disini\n\nfunction getProvince(setList, setLoading){\n  axios({\n    method: \"GET\",\n    url: \"https://raw.githubusercontent.com/ibnux/data-indonesia/master/propinsi.json\"\n  }).then(function(res){\n    //Success\n    setList(res.data)\n    console.log(res.data,'success');\n  })\n  .catch(function(err){\n    //Error\n    console.log(err,'error');\n  })\n  .finally(function(){\n    setLoading(false);\n  });\n}\n//class direacet className\nfunction App() {\n  // deklarasi variable\n  const [list, setList] = React.useState(\n    JSON.parse(window.localStorage.getItem(\"LOCAL_LIST\")) || [] //if true and Authorization\n  );\n\n  const [inputState, setInputState] = React.useState({\n    id: \"\",\n    nama: \"\",\n  });\n\n  // const [list, setList] = React.useState([]);\n  const [loading, setLoading] = React.useState(true);\n  const [keyword, setKeyword] = React.useState(\"\");\n\n\n  React.useEffect(function(){\n    getProvince(setList, setLoading);\n  },[]); // di panggil sekali\n\n  React.useEffect(function() {\n    window.localStorage.setItem(\n      \"LOCAL_LIST\",\n      JSON.stringify(list)\n    );\n  },[list]);\n\n  if(loading){\n    return (\n    <div className=\"App\"> \n        <div className=\"wrapper\">Loading .. </div>\n    </div>\n    );\n  }\n  \n  // console.log(inputState)\n  return (\n    <div className=\"App\">\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      <div className=\"wrapper\">  \n            <h1>Form</h1>\n            <div>\n                <div className=\"form-input\">\n                    <input \n                    type=\"text\" \n                    id=\"input\"\n                    value={inputState.nama}\n                    onChange={(event) => setInputState(event.target.value)}  placeholder=\"Please Insert Text\" />\n                    \n                    <button type=\"button\" id=\"button\" \n                    onClick={function(){\n                      //nambah array dari array yang udah ada\n                      setList([...list, {id: new Date(), nama:inputState}])\n                    }}\n                     className=\"button-class\">Submit</button>\n                    <br/>\n                    <br/>\n\n                    <input \n                    type=\"text\" \n                    id=\"input\"\n                    onChange={(event) => {\n                      setKeyword(event.target.value)\n                    }}  \n                    placeholder=\"Search\" />\n                </div>\n            </div>\n            <center>\n            <div id=\"result\">\n              <div>Results: </div>\n              \n              {list.filter((item) =>\n               item.nama.toLowerCase().includes(keyword.toLowerCase())\n              )\n              .map((value, index) =>{\n                return <Card \n                id={index}\n                nama={value.nama}\n                onRemove={function(){\n                  setList([...list.filter((d, i) => d.id !== value.id)])\n                }}\n                />;\n              })}\n            </div>\n            {/* <h1> Profile </h1>\n            <Card nama=\"test\" onRemove={function(){}} /> */}\n            </center>\n        </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}